package postreSQL

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"tg_weather_bot/internal/config"
	"tg_weather_bot/pkg/logging"
	"time"
)

type PostgresDB struct {
	db     *sql.DB
	logger logging.Logger
}

type UserStat struct {
	City      string
	TimeStamp time.Time
}

func NewPostgresDB(cfg *config.DBConfig) (*PostgresDB, error) {
	db, err := sql.Open(
		"postgres",
		fmt.Sprintf(
			"host=%s port=%s user=%s dbname=%s password=%s sslmode=%s",
			cfg.Host, cfg.Port, cfg.User, cfg.DBName, cfg.Password, cfg.SSLMode))
	if err != nil {
		return nil, err
	}

	if err = db.Ping(); err != nil {
		return nil, err
	}

	if _, err = db.Exec(
		"CREATE TABLE IF NOT EXISTS user_stat (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ,  user_id integer NOT NULL, city text NOT NULL, time_stamp timestamptz)"); err != nil {
		return nil, err
	}

	return &PostgresDB{db: db}, nil

}
func (pDB *PostgresDB) GetStatisticByUserID(user_id int64) ([]UserStat, error) {
	rows, err := pDB.db.Query("SELECT city, time_stamp  FROM user_stat WHERE user_id = $1", user_id)

	defer rows.Close()

	if err != nil {
		return nil, err
	}

	var userStatArr []UserStat
	for rows.Next() {
		var userStat UserStat
		err = rows.Scan(&userStat.City, &userStat.TimeStamp)
		if err != nil {
			pDB.logger.Errorf("can't scan row err: %v", err)
			continue
		}
		userStatArr = append(userStatArr, userStat)
	}

	return userStatArr, nil

}

func (pDB *PostgresDB) AddStatic(userID int64, city string, timeStamp time.Time) error {
	_, err := pDB.db.Query("INSERT INTO user_stat (user_id, city, time_stamp) VALUES ($1, $2, $3)", userID, city, timeStamp)

	if err != nil {
		pDB.logger.Errorf("Can't insert into DB err: %v", err)
		return err
	}

	return nil
}
